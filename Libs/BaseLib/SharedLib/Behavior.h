/*!
@file Behavior.h
@brief 行動クラス
@copyright Copyright (c) 2017 WiZ Tamura Hiroki,Yamanoi Yasushi.
*/

#pragma once
#include "stdafx.h"

namespace basecross {

	class GameObject;
	//--------------------------------------------------------------------------------------
	///	行動クラスの親クラス
	//--------------------------------------------------------------------------------------
	class Behavior : public ObjectInterface {
	protected:
		//--------------------------------------------------------------------------------------
		/*!
		@brief	プロテクトコンストラクタ
		@param[in]	GameObjectPtr	このコンポーネントを所持するゲームオブジェクト
		*/
		//--------------------------------------------------------------------------------------
		explicit Behavior(const shared_ptr<GameObject>& GameObjectPtr);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	プロテクトデストラクタ
		*/
		//--------------------------------------------------------------------------------------
		virtual ~Behavior();
	public:
		//アクセサ
		//--------------------------------------------------------------------------------------
		/*!
		@brief	ゲームオブジェクトの取得
		@return	このコンポーネントを所持するゲームオブジェクト
		*/
		//--------------------------------------------------------------------------------------
		shared_ptr<GameObject> GetGameObject() const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	所属するステージの取得
		@return	ゲームオブジェクトが所属するステージ
		*/
		//--------------------------------------------------------------------------------------
		shared_ptr<Stage> GetStage() const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief 初期化(空関数、必要なら多重定義する)
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		virtual void OnCreate() {}
	private:
		// pImplイディオム
		struct Impl;
		unique_ptr<Impl> pImpl;
	};

	//--------------------------------------------------------------------------------------
	///	行動ユーティリティクラス
	//--------------------------------------------------------------------------------------
	class UtilBehavior : public Behavior {
	public:
		//--------------------------------------------------------------------------------------
		/*!
		@brief	コンストラクタ
		@param[in]	GameObjectPtr	このコンポーネントを所持するゲームオブジェクト
		*/
		//--------------------------------------------------------------------------------------
		UtilBehavior(const shared_ptr<GameObject>& GameObjectPtr) :
			Behavior(GameObjectPtr)
		{}
		//--------------------------------------------------------------------------------------
		/*!
		@brief	デストラクタ
		*/
		//--------------------------------------------------------------------------------------
		virtual ~UtilBehavior() {}
		//--------------------------------------------------------------------------------------
		/*!
		@brief 進行方向を向くようにする
		@param[in]	LerpFact	補間係数（0.0から1.0の間）
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void RotToHead(float LerpFact);
		//--------------------------------------------------------------------------------------
		/*!
		@brief 進行方向を向くようにする(速度指定方式)
		@param[in]	LerpFact	補間係数（0.0から1.0の間）
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void RotToHead(const bsm::Vec3& Velocity, float LerpFact);

	};


	//--------------------------------------------------------------------------------------
	///	Velocity行動クラス
	//--------------------------------------------------------------------------------------
	class Velocity : public Behavior {
	public:
		//--------------------------------------------------------------------------------------
		/*!
		@brief	コンストラクタ
		@param[in]	GameObjectPtr	このコンポーネントを所持するゲームオブジェクト
		*/
		//--------------------------------------------------------------------------------------
		Velocity(const shared_ptr<GameObject>& GameObjectPtr);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	デストラクタ
		*/
		//--------------------------------------------------------------------------------------
		virtual ~Velocity();
		//--------------------------------------------------------------------------------------
		/*!
		@brief	質量を得る
		@return	質量
		*/
		//--------------------------------------------------------------------------------------
		float GetMass() const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	質量を設定する
		@param[in]	m	質量
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void SetMass(float m);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	現在の速度を得る
		@return	現在の速度
		*/
		//--------------------------------------------------------------------------------------
		const bsm::Vec3& GetVelocity() const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	現在の速度を設定する
		@param[in]	velo	速度
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void SetVelocity(const bsm::Vec3& velo);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	フォースを初期化する
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void InitForce();
		//--------------------------------------------------------------------------------------
		/*!
		@brief	現在のフォースを得る
		@return	現在のフォース
		*/
		//--------------------------------------------------------------------------------------
		const bsm::Vec3& GetForce() const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	現在のフォースに追加する
		@param[in]	force	追加するフォース
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void AplayForce(const bsm::Vec3& force);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	指定した時間だけ速度をかける
		@param[in]	Pos	計算前の位置
		@param[in]	CalcTime	時間
		@return 計算後の位置
		*/
		//--------------------------------------------------------------------------------------
		bsm::Vec3 UpdateFromTime(const bsm::Vec3& Pos,float CalcTime);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	行動を実行する
		@param[in]	Pos	計算前の位置
		@return 計算後の位置
		*/
		//--------------------------------------------------------------------------------------
		bsm::Vec3 Execute(const bsm::Vec3& Pos);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	指定した時間だけ速度をかけTransformを更新する
		@param[in]	CalcTime	時間
		@return なし
		*/
		//--------------------------------------------------------------------------------------
		void UpdateFromTimeTrans(float CalcTime);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	行動を実行しTransformを更新する
		@return なし
		*/
		//--------------------------------------------------------------------------------------
		void ExecuteTrans();
	private:
		// pImplイディオム
		struct Impl;
		unique_ptr<Impl> pImpl;
	};


	//--------------------------------------------------------------------------------------
	///	Gravity行動クラス
	//--------------------------------------------------------------------------------------
	class Gravity : public Behavior {
	public:
		//--------------------------------------------------------------------------------------
		/*!
		@brief	コンストラクタ
		@param[in]	GameObjectPtr	このコンポーネントを所持するゲームオブジェクト
		*/
		//--------------------------------------------------------------------------------------
		Gravity(const shared_ptr<GameObject>& GameObjectPtr);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	デストラクタ
		*/
		//--------------------------------------------------------------------------------------
		virtual ~Gravity();
		//--------------------------------------------------------------------------------------
		/*!
		@brief	現在の重力を得る
		@return	現在の重力
		*/
		//--------------------------------------------------------------------------------------
		const bsm::Vec3& GetGravity() const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	現在の重力を設定する
		@param[in]	gravity	重力値
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void SetGravity(const bsm::Vec3& gravity);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	ジャンプのスタート
		@param[in]	StartVec	初速度
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void StartJump(const bsm::Vec3& StartVec);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	ジャンプをスタートし、Transformをリセットする
		@param[in]	StartVec	初速度
		@param[in]	EscapeSpan	Transformをセットする場合の補正値
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void StartJumpTrans(const bsm::Vec3& StartVec,float EscapeSpan = 0.0f);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	指定した時間だけ重力をかける
		@param[in]	CalcTime	時間
		@return	現在の重力による速度
		*/
		//--------------------------------------------------------------------------------------
		bsm::Vec3 UpdateFromTime(float CalcTime);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	行動を実行する
		@return	現在の重力による速度
		*/
		//--------------------------------------------------------------------------------------
		bsm::Vec3 Execute();
		//--------------------------------------------------------------------------------------
		/*!
		@brief	指定した時間だけ重力をかけTransformを更新する
		@param[in]	CalcTime	時間
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void UpdateFromTimeTrans(float CalcTime);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	行動を実行しTransformを更新する
		@param[in]	TransSet	Transformをセットするかどうか
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void ExecuteTrans();
		//--------------------------------------------------------------------------------------
		/*!
		@brief	現在の重力による速度を得る
		@return	重力による速度
		*/
		//--------------------------------------------------------------------------------------
		bsm::Vec3 GetGravityVelocity() const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	現在の重力による速度を0にする
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void SetGravityVelocityZero();
		//--------------------------------------------------------------------------------------
		/*!
		@brief	現在の重力による速度を設定する
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void SetGravityVelocity(const bsm::Vec3& velo);
	private:
		// pImplイディオム
		struct Impl;
		unique_ptr<Impl> pImpl;
	};


	//--------------------------------------------------------------------------------------
	///	行動クラスの親クラス(テンプレート版)
	//--------------------------------------------------------------------------------------
	template <typename T>
	class ObjBehavior : public ObjectInterface {
		weak_ptr<T> m_GameObject;
	protected:
		//--------------------------------------------------------------------------------------
		/*!
		@brief	プロテクトコンストラクタ
		@param[in]	GameObjectPtr	このコンポーネントを所持するゲームオブジェクト
		*/
		//--------------------------------------------------------------------------------------
		explicit ObjBehavior(const shared_ptr<T>& GameObjectPtr):
			m_GameObject(GameObjectPtr)
		{}
		//--------------------------------------------------------------------------------------
		/*!
		@brief	プロテクトデストラクタ
		*/
		//--------------------------------------------------------------------------------------
		virtual ~ObjBehavior() {}
	public:
		//アクセサ
		//--------------------------------------------------------------------------------------
		/*!
		@brief	ゲームオブジェクトの取得
		@return	このコンポーネントを所持するゲームオブジェクト
		*/
		//--------------------------------------------------------------------------------------
		shared_ptr<T> GetGameObject() const {
			auto shptr = m_GameObject.lock();
			if (!shptr) {
				throw BaseException(
					L"GameObjectは有効ではありません",
					L"if (!shptr)",
					L"ObjBehavior::GetGameObject()"
				);
			}
			else {
				return shptr;
			}
		}
		//--------------------------------------------------------------------------------------
		/*!
		@brief	所属するステージの取得
		@return	ゲームオブジェクトが所属するステージ
		*/
		//--------------------------------------------------------------------------------------
		shared_ptr<Stage> GetStage() const {
			return GetGameObject()->GetStage();
		}
		//--------------------------------------------------------------------------------------
		/*!
		@brief 初期化(空関数、必要なら多重定義する)
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		virtual void OnCreate() {}
	};



}
//end basecross
