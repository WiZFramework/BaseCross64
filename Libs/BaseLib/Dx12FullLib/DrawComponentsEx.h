/*!
@file DrawComponentsEx.h
@brief 描画コンポーネント拡張
@copyright Copyright (c) 2017 WiZ Tamura Hiroki,Yamanoi Yasushi.
*/
#pragma once
#include "stdafx.h"

namespace basecross {

	//--------------------------------------------------------------------------------------
	///	Basicシェーダー用コンスタントバッファ
	//--------------------------------------------------------------------------------------
	struct BasicConstants
	{
		bsm::Col4 diffuseColor;
		bsm::Col4 emissiveColor;
		bsm::Col4 specularColorAndPower;

		bsm::Col4 lightDirection[3];
		bsm::Col4 lightDiffuseColor[3];
		bsm::Col4 lightSpecularColor[3];

		bsm::Vec4 eyePosition;

		bsm::Col4 fogColor;
		bsm::Vec4 fogVector;

		bsm::Mat4x4 world;
		bsm::Vec4 worldInverseTranspose[3];
		bsm::Mat4x4 worldViewProj;
		//汎用フラグ
		XMUINT4 activeFlg;
		//以下影
		bsm::Vec4 lightPos;
		bsm::Vec4 eyePos;
		bsm::Mat4x4 lightView;
		bsm::Mat4x4 lightProjection;

		bsm::Vec4 bones[3 * 72];

	};

	//--------------------------------------------------------------------------------------
	/// PNT頂点シェーダ(頂点ライティング)
	//--------------------------------------------------------------------------------------
	//影無し
	DECLARE_DX12SHADER(BcVSPNTStaticVL)
	//影付き
	DECLARE_DX12SHADER(BcVSPNTStaticVLShadow)

	//--------------------------------------------------------------------------------------
	/// PNTピクセルシェーダ(頂点ライティング)
	//--------------------------------------------------------------------------------------
	//影無し
	DECLARE_DX12SHADER(BcPSPNTVL)
	//影付き
	DECLARE_DX12SHADER(BcPSPNTVLShadow)

	//--------------------------------------------------------------------------------------
	///	Bc描画オブジェクトの親
	//--------------------------------------------------------------------------------------
	class BcBaseDraw : public DrawComponent {
	protected:
		//--------------------------------------------------------------------------------------
		/*!
		@brief コンストラクタ
		@param[in]	StagePtr	ステージのポインタ
		*/
		//--------------------------------------------------------------------------------------
		explicit BcBaseDraw(const shared_ptr<GameObject>& GameObjectPtr);
		//--------------------------------------------------------------------------------------
		/*!
		@brief デストラクタ
		*/
		//--------------------------------------------------------------------------------------
		virtual ~BcBaseDraw();
		//--------------------------------------------------------------------------------------
		/*!
		@brief	コンスタントバッファの設定
		@param[out]	BcCb	設定するコンスタントバッファ構造体
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void SetConstants(BasicConstants& BcCb);

		//--------------------------------------------------------------------------------------
		/*!
		@brief	スタティックメッシュの描画
		@tparam[in]	T_VShader	使用する頂点シェーダ
		@tparam[in]	T_PShader	使用するピクセルシェーダ
		@param[in]	data	メッシュのデータ
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		template<typename T_VShader, typename T_PShader>
		void DrawStatic(const MeshPrimData& data) {
/*
未定義
*/
		}
		//--------------------------------------------------------------------------------------
		/*!
		@brief	モデルメッシュの描画
		@tparam[in]	T_VShader	使用する頂点シェーダ
		@tparam[in]	T_PShader	使用するピクセルシェーダ
		@param[in]	data	メッシュのデータ
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		template<typename T_VShader, typename T_PShader>
		void DrawModel(const MeshPrimData& data) {
/*
未定義
*/
		}
		//描画コンポーネント個別処理
		//--------------------------------------------------------------------------------------
		/*!
		@brief	PNT影無し描画リソースの作成
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void CreateBcPNTNotShadow();
		//--------------------------------------------------------------------------------------
		/*!
		@brief	PNT影付き描画リソースの作成
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void CreateBcPNTWithShadow();
		//--------------------------------------------------------------------------------------
		/*!
		@brief	PNT描画（影付き、影無し共通）
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void DrawBcPNT();
	public:
		//--------------------------------------------------------------------------------------
		/*!
		@brief	オリジナルメッシュを使うかどうか
		@return	使う場合はtrue
		*/
		//--------------------------------------------------------------------------------------
		bool IsOriginalMeshUse() const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	オリジナルメッシュを使うかどうかを設定
		@param[in]	b	オリジナルメッシュを使うかどうか
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void SetOriginalMeshUse(bool b);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	オリジナルなメッシュリソースの取得
		@return	オリジナルなメッシュリソース
		*/
		//--------------------------------------------------------------------------------------
		shared_ptr<MeshResource> GetOriginalMeshResource() const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	オリジナルなメッシュリソースの設定
		@param[in]	MeshRes	メッシュリソース
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void SetOriginalMeshResource(const shared_ptr<MeshResource>& MeshRes);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	オリジナルメッシュを作成する
		@param[in]	Vertices	頂点の配列
		@param[in]	indices		インデックスの配列
		*/
		//--------------------------------------------------------------------------------------
		template <typename T>
		void CreateOriginalMesh(vector<T>& Vertices, vector<uint16_t>& indices) {
			try {
				auto MeshRes = MeshResource::CreateMeshResource(Vertices, indices, true);
				SetOriginalMeshResource(MeshRes);
			}
			catch (...) {
				throw;
			}
		}
		//--------------------------------------------------------------------------------------
		/*!
		@brief	オリジナルメッシュの頂点バッファを変更する
		@param[in]	Vertices	頂点配列
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		template <typename T>
		void UpdateVertices(const vector<T>& Vertices) {
			auto MeshRes = GetOriginalMeshResource();
			if (!MeshRes) {
				throw BaseException(
					L"オリジナルメッシュが作成されていません",
					L"if (!GetOriginalMeshResource())",
					L"BcStaticBaseDraw::UpdateVertices()"
				);

			}
			MeshRes->UpdateVirtexBuffer(Vertices);
		}
		//--------------------------------------------------------------------------------------
		/*!
		@brief	メッシュリソースの取得(オリジナルかどうかは内部で処理される)
		@return	メッシュリソース
		*/
		//--------------------------------------------------------------------------------------
		shared_ptr<MeshResource> GetMeshResource() const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	オリジナルではないメッシュリソースの設定(仮想関数)
		@param[in]	MeshRes	メッシュリソース
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		virtual void SetMeshResource(const shared_ptr<MeshResource>& MeshRes);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	オリジナルではないメッシュリソースの設定
		@param[in]	MeshKey	メッシュキー
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void SetMeshResource(const wstring& MeshKey);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	テクスチャリソースの設定
		@param[in]	TextureRes	テクスチャリソース
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void SetTextureResource(const shared_ptr<TextureResource>& TextureRes);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	テクスチャリソースの設定
		@param[in]	TextureKey	登録されているテクスチャキー
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void SetTextureResource(const wstring& TextureKey);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	テクスチャリソースの取得
		@return	テクスチャリソース
		*/
		//--------------------------------------------------------------------------------------
		shared_ptr<TextureResource> GetTextureResource() const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	マルチメッシュリソースを得る
		@param[in]	ExceptionActive	エラー時に例外が発生するかどうか
		@return	メッシュリソース
		*/
		//--------------------------------------------------------------------------------------
		shared_ptr<MultiMeshResource> GetMultiMeshResource() const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	マルチメッシュリソースを設定する
		@param[in]	MeshResourcePtr	メッシュリソース
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		virtual void SetMultiMeshResource(const shared_ptr<MultiMeshResource>& MeshResourcePtr);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	マルチメッシュリソースを設定する
		@param[in]	ResKey	メッシュリソースのキー
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void SetMultiMeshResource(const wstring& ResKey);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	エミッシブ色の取得
		@return	エミッシブ色
		*/
		//--------------------------------------------------------------------------------------
		bsm::Col4 GetEmissive() const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	エミッシブ色の設定
		@param[in]	col	エミッシブ色
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void SetEmissive(const bsm::Col4& col);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	デフューズ色の取得
		@return	デフューズ色
		*/
		//--------------------------------------------------------------------------------------
		bsm::Col4 GetDiffuse() const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	デフューズ色の設定
		@param[in]	col	デフューズ色
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void SetDiffuse(const bsm::Col4& col);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	スペキュラー色の取得
		@return	スペキュラー色
		*/
		//--------------------------------------------------------------------------------------
		bsm::Col4 GetSpecularColor() const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	スペキュラー色の設定
		@param[in]	col	スペキュラー色
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void SetSpecularColor(const bsm::Col4& col);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	スペキュラー色をなくす
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void DisableSpecular();
		//--------------------------------------------------------------------------------------
		/*!
		@brief	スペキュラーパワーの取得
		@return	スペキュラーパワー色
		*/
		//--------------------------------------------------------------------------------------
		float GetSpecularPower() const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	スペキュラーパワーの設定
		@param[in]	pow	スペキュラーパワー色
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void SetSpecularPower(float pow);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	スペキュラーとパワー色の取得
		@return	スペキュラーとパワー色
		*/
		//--------------------------------------------------------------------------------------
		bsm::Col4 GetSpecularColorAndPower() const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	スペキュラーとパワー色の設定
		@param[in]	col	スペキュラーとパワー色
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void SetSpecularColorAndPower(const bsm::Col4& col);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	アルファ値の取得
		@return	アルファ値
		*/
		//--------------------------------------------------------------------------------------
		float GetAlpha() const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	アルファ値の設定
		@param[in]	pow	アルファ値
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void SetAlpha(float a);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	カラーとアルファ色の取得
		@return	カラーとアルファ色
		*/
		//--------------------------------------------------------------------------------------
		bsm::Col4 GetColorAndAlpha() const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	カラーとアルファ色の設定
		@param[in]	col カラーとアルファ色
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void SetColorAndAlpha(const bsm::Col4& col);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	ライティングするかどうか
		@return	する場合はtrue
		*/
		//--------------------------------------------------------------------------------------
		bool IsLightingEnabled() const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	ライティングするかどうか
		@return	する場合はtrue
		*/
		//--------------------------------------------------------------------------------------
		bool GetLightingEnabled() const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	ライティングするかどうか設定
		@param[in] value ライティングするかどうか
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void SetLightingEnabled(bool value);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	ピクセルライティングするかどうか
		@return	する場合はtrue
		*/
		//--------------------------------------------------------------------------------------
		bool GetPerPixelLighting() const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	ピクセルライティングするかどうか
		@return	する場合はtrue
		*/
		//--------------------------------------------------------------------------------------
		bool IsPerPixelLighting() const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	ピクセルライティングするかどうか設定
		@param[in] value ピクセルライティングするかどうか
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void SetPerPixelLighting(bool value);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	ライティングパラメータを設定する
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void SetLightingParamaters();
		//--------------------------------------------------------------------------------------
		/*!
		@brief	法線にバイアスをかけるかどうか
		@return	する場合はtrue
		*/
		//--------------------------------------------------------------------------------------
		bool GetBiasedNormals() const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	法線にバイアスをかけるかどうか
		@return	する場合はtrue
		*/
		//--------------------------------------------------------------------------------------
		bool IsBiasedNormals() const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	法線にバイアスをかけるかどうか設定
		@param[in] value 法線にバイアスをかけるかどうか
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void SetBiasedNormals(bool value);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	アンビエントライト色の取得
		@return	アンビエントライト色
		*/
		//--------------------------------------------------------------------------------------
		bsm::Col4 GetAmbientLightColor()const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	アンビエントライト色の設定
		@param[in] value アンビエントライト色
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void SetAmbientLightColor(const bsm::Col4& value);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	インデックスが有効かどうかチェックする（無効なら例外）
		@param[in] whichLight ライトのインデックス
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		static void ValidateLightIndex(int whichLight);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	ライトの最大値を得る
		@return	ライトの最大値
		*/
		//--------------------------------------------------------------------------------------
		int GetMaxDirectionalLights();
		//--------------------------------------------------------------------------------------
		/*!
		@brief	指定のライトを有効にするかどうかを得る
		@param[in] whichLight ライトのインデックス
		@return	有効ならtrue
		*/
		//--------------------------------------------------------------------------------------
		bool GetLightEnabled(int whichLight)const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	指定のライトを有効にするかどうかを得る
		@param[in] whichLight ライトのインデックス
		@return	有効ならtrue
		*/
		//--------------------------------------------------------------------------------------
		bool IsLightEnabled(int whichLight)const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	指定のライトを有効にするかどうか
		@param[in] whichLight ライトのインデックス
		@param[in] value 有効にするかどうか
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void SetLightEnabled(int whichLight, bool value);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	指定のライトの向きを得る
		@param[in] whichLight ライトのインデックス
		@return	指定のライトの向き
		*/
		//--------------------------------------------------------------------------------------
		bsm::Vec3 GetLightDirection(int whichLight) const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	指定のライトの向きを設定する
		@param[in] whichLight ライトのインデックス
		@param[in] value 値
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void SetLightDirection(int whichLight, const bsm::Vec3& value);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	指定のライトのデフューズ色を得る
		@param[in] whichLight ライトのインデックス
		@return	指定のライトのデフューズ色
		*/
		//--------------------------------------------------------------------------------------
		bsm::Col4 GetLightDiffuseColor(int whichLight) const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	指定のライトのデフューズ色を設定する
		@param[in] whichLight ライトのインデックス
		@param[in] value 値
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void SetLightDiffuseColor(int whichLight, const bsm::Col4& value);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	指定のライトのスペキュラー色を得る
		@param[in] whichLight ライトのインデックス
		@return	指定のライトのスペキュラー色
		*/
		//--------------------------------------------------------------------------------------
		bsm::Col4 GetLightSpecularColor(int whichLight) const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	指定のライトのスペキュラー色を設定する
		@param[in] whichLight ライトのインデックス
		@param[in] value 値
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void SetLightSpecularColor(int whichLight, const bsm::Col4& value);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	フォグを使うかどうか
		@return	フォグを使うならtrue
		*/
		//--------------------------------------------------------------------------------------
		bool GetFogEnabled() const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	フォグを使うかどうか
		@return	フォグを使うならtrue
		*/
		//--------------------------------------------------------------------------------------
		bool IsFogEnabled() const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	フォグを使うかどうか指定
		@param[in]	b	フォグを使うならtrue
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void SetFogEnabled(bool b);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	フォグの開始位置を得る
		@return	フォグの開始位置
		*/
		//--------------------------------------------------------------------------------------
		float GetFogStart() const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	フォグの開始位置指定
		@param[in]	value	フォグの開始位置
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void SetFogStart(float value);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	フォグの終了位置を得る
		@return	フォグの終了位置
		*/
		//--------------------------------------------------------------------------------------
		float GetFogEnd() const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	フォグの終了位置指定
		@param[in]	value	フォグの終了位置
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void SetFogEnd(float value);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	フォグ色の取得
		@return	フォグ色
		*/
		//--------------------------------------------------------------------------------------
		bsm::Col4 GetFogColor() const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	フォグ色の設定
		@param[in]	col	フォグ色
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void SetFogColor(const bsm::Col4& col);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	影を描画するかどうか得る
		@return	影を描画すればtrue
		*/
		//--------------------------------------------------------------------------------------
		bool GetOwnShadowActive() const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	影を描画するかどうか得る
		@return	影を描画すればtrue
		*/
		//--------------------------------------------------------------------------------------
		bool IsOwnShadowActive() const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	影を描画するかどうか設定する
		@param[in]	b		影を描画するかどうか
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		virtual void SetOwnShadowActive(bool b);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	デフィーズ色をモデル設定優先かどうか得る
		@return	デフィーズ色をモデル設定優先ならtrue
		*/
		//--------------------------------------------------------------------------------------
		bool GetModelDiffusePriority() const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	デフィーズ色をモデル設定優先かどうか得る
		@return	デフィーズ色をモデル設定優先ならtrue
		*/
		//--------------------------------------------------------------------------------------
		bool IsModelDiffusePriority() const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	デフィーズ色をモデル設定優先かどうか設定する
		@param[in]	b	デフィーズ色をモデル設定優先かどうか
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void SetModelDiffusePriority(bool b);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	エミッシブ色をモデル設定優先かどうか得る
		@return	エミッシブ色をモデル設定優先ならtrue
		*/
		//--------------------------------------------------------------------------------------
		bool GetModelEmissivePriority() const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	エミッシブ色をモデル設定優先かどうか得る
		@return	エミッシブ色をモデル設定優先ならtrue
		*/
		//--------------------------------------------------------------------------------------
		bool IsModelEmissivePriority() const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	エミッシブ色をモデル設定優先かどうか設定する
		@param[in]	b	エミッシブ色をモデル設定優先かどうか
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void SetModelEmissivePriority(bool b);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	モデルのテクスチャを有効にするかどうか得る
		@return	モデルのテクスチャを有効ならtrue
		*/
		//--------------------------------------------------------------------------------------
		bool GetModelTextureEnabled() const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	モデルのテクスチャを有効にするかどうか得る
		@return	モデルのテクスチャを有効ならtrue
		*/
		//--------------------------------------------------------------------------------------
		bool IsModelTextureEnabled() const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	モデルのテクスチャを有効にするかどうか設定する
		@param[in]	b	モデルのテクスチャを有効にするかどうか
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void SetModelTextureEnabled(bool b);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	法線マップテクスチャリソースの取得
		@return	法線マップテクスチャリソース
		*/
		//--------------------------------------------------------------------------------------
		shared_ptr<TextureResource> GetNormalMapTextureResource() const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	法線マップテクスチャリソースの設定
		@param[in]	TextureRes	テクスチャリソース
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void SetNormalMapTextureResource(const shared_ptr<TextureResource>& TextureRes);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	法線マップテクスチャリソースの設定
		@param[in]	TextureKey	テクスチャキー
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void SetNormalMapTextureResource(const wstring& TextureKey);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	法線マップテクスチャリソース配列の取得
		@return	法線マップテクスチャリソース配列
		*/
		//--------------------------------------------------------------------------------------
		const vector<weak_ptr<TextureResource>>& GetNormalMapTextureResourceVec() const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	法線マップテクスチャリソース配列の取得
		@return	法線マップテクスチャリソース配列
		*/
		//--------------------------------------------------------------------------------------
		vector<weak_ptr<TextureResource>>& GetNormalMapTextureResourceVec();
		//--------------------------------------------------------------------------------------
		/*!
		@brief ボーンの初期化
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void BoneInit();
		//--------------------------------------------------------------------------------------
		/*!
		@brief	開始行列から終了行列の間のt時間時の行列を返す
		@param[in]	m1	開始の行列
		@param[in]	m2	終了の行列
		@param[in]	t	時間（0から1.0f）
		@param[out]	out	結果を受け取る行列
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void InterpolationMatrix(const bsm::Mat4x4& m1, const bsm::Mat4x4& m2, float t, bsm::Mat4x4& out);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	アニメーションを追加する
		@param[in]	Name	アニメーション名
		@param[in]	StartSample	開始サンプル
		@param[in]	SampleLength	サンプルの長さ
		@param[in]	Loop	ループするかどうか
		@param[in]	SamplesParSecond = 30.0f	1秒あたりのサンプル数
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void AddAnimation(const wstring& Name, int StartSample, int SampleLength, bool Loop,
			float SamplesParSecond = 30.0f);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	現在のアニメーションを変更する
		@param[in]	AnemationName	アニメーション名（すでに追加されているもの）
		@param[in]	StartTime = 0.0f	開始からの秒数
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void ChangeCurrentAnimation(const wstring& AnemationName, float StartTime = 0.0f);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	現在のアニメーション名を得る
		@return	アニメーション名（文字列）
		*/
		//--------------------------------------------------------------------------------------
		const wstring& GetCurrentAnimation() const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	現在のアニメーションタイムを得る
		@return	アニメーションタイム
		*/
		//--------------------------------------------------------------------------------------
		float GetCurrentAnimationTime() const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	現在のアニメーションが終了しているかどうか
		@return	修了していればtrue
		*/
		//--------------------------------------------------------------------------------------
		bool IsTargetAnimeEnd() const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	現在のアニメーションを進める
		@param[in]	ElapsedTime	経過時間
		@return	アニメーションが終了すればtrue
		*/
		//--------------------------------------------------------------------------------------
		bool UpdateAnimation(float ElapsedTime);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	ローカルボーン行列配列を得る
		@return	ローカルボーン行列配列の先頭ポインタ
		*/
		//--------------------------------------------------------------------------------------
		virtual const vector< bsm::Mat4x4 >* GetVecLocalBonesPtr() const override;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	ローカルボーン行列配列の参照を得る(書き換え可能)
		@return	ローカルボーン行列配列の参照
		*/
		//--------------------------------------------------------------------------------------
		vector< bsm::Mat4x4 >& GetVecLocalBones();
		//--------------------------------------------------------------------------------------
		/*!
		@brief	ローカルボーン行列配列を得る（マルチメッシュ版）
		@return	ローカルボーン行列配列の先頭ポインタ
		*/
		//--------------------------------------------------------------------------------------
		virtual const vector< bsm::Mat4x4 >* GetVecMultiLocalBonesPtr(size_t index) const override;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	ローカルボーン行列配列の参照を得る(マルチメッシュ版版、書き換え可能)
		@return	ローカルボーン行列配列の参照（範囲外なら例外）
		*/
		//--------------------------------------------------------------------------------------
		vector< bsm::Mat4x4 >& GetVecMultiLocalBones(size_t index);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	メッシュのローカル頂点配列を得る
		@param[out]	vertices	受け取る頂点の配列
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void GetStaticMeshLocalPositions(vector<bsm::Vec3>& vertices);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	メッシュのワールド頂点配列を得る
		@param[out]	vertices	受け取る頂点の配列
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void GetStaticMeshWorldPositions(vector<bsm::Vec3>& vertices);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	線分とメッシュのワールド頂点の衝突判定
		@param[in]	StartPos	線分の開始点
		@param[in]	EndPos	線分の終了点
		@param[out]	HitPoint	衝突していた場合の衝突点
		@param[out]	RetTri	衝突していた場合の三角形
		@param[out]	RetIndex	衝突していた場合の三角形の位置
		@return	衝突していたらtrue
		*/
		//--------------------------------------------------------------------------------------
		bool HitTestStaticMeshSegmentTriangles(const bsm::Vec3& StartPos, const bsm::Vec3& EndPos, bsm::Vec3& HitPoint, TRIANGLE& RetTri, size_t& RetIndex);

		bool HitTestStaticMeshSphereTriangles(const SPHERE& StartSp, const SPHERE& EndSp, bsm::Vec3& HitPoint, TRIANGLE& RetTri, size_t& RetIndex) {
			return false;
		}

		//--------------------------------------------------------------------------------------
		/*!
		@brief	スキン処理済みのメッシュのローカル頂点配列を得る
		@param[out]	vertices	受け取る頂点の配列
		@return	なし（ボーンがなければ例外）
		*/
		//--------------------------------------------------------------------------------------
		void GetSkinedMeshLocalPositions(vector<bsm::Vec3>& vertices);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	スキン処理済みのメッシュのワールド頂点配列を得る
		@param[out]	vertices	受け取る頂点の配列
		@return	なし（ボーンがなければ例外）
		*/
		//--------------------------------------------------------------------------------------
		void GetSkinedMeshWorldPositions(vector<bsm::Vec3>& vertices);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	線分とスキンメッシュのワールド頂点の衝突判定
		@param[in]	StartPos	線分の開始点
		@param[in]	EndPos	線分の終了点
		@param[out]	HitPoint	衝突していた場合の衝突点
		@param[out]	RetTri	衝突していた場合の三角形
		@param[out]	RetIndex	衝突していた場合の三角形の位置
		@return	衝突していたらtrue
		*/
		//--------------------------------------------------------------------------------------
		bool HitTestSkinedMeshSegmentTriangles(const bsm::Vec3& StartPos, const bsm::Vec3& EndPos, bsm::Vec3& HitPoint, TRIANGLE& RetTri, size_t& RetIndex);
		bool HitTestSkinedMeshSphereTriangles(const SPHERE& StartSp, const SPHERE& EndSp, bsm::Vec3& HitPoint, TRIANGLE& RetTri, size_t& RetIndex) {
			return false;
		}

		//--------------------------------------------------------------------------------------
		/*!
		@brief	Dx12描画リソース群の取得（const）
		@return	Dx12描画リソース群構造体
		*/
		//--------------------------------------------------------------------------------------
		const Dx12DrawResources<BasicConstants>& GetBasicDrawResources() const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	Dx12描画リソース群の取得
		@return	Dx12描画リソース群構造体
		*/
		//--------------------------------------------------------------------------------------
		Dx12DrawResources<BasicConstants>& GetBasicDrawResources();
	private:
		// pImplイディオム
		struct Impl;
		unique_ptr<Impl> pImpl;
	};

	//--------------------------------------------------------------------------------------
	///	BcPNTStatic描画コンポーネント
	//--------------------------------------------------------------------------------------
	class BcPNTStaticDraw : public BcBaseDraw {
	public:
		//--------------------------------------------------------------------------------------
		/*!
		@brief	コンストラクタ
		@param[in]	GameObjectPtr	ゲームオブジェクト
		*/
		//--------------------------------------------------------------------------------------
		explicit BcPNTStaticDraw(const shared_ptr<GameObject>& GameObjectPtr);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	デストラクタ
		*/
		//--------------------------------------------------------------------------------------
		virtual ~BcPNTStaticDraw();
		//--------------------------------------------------------------------------------------
		/*!
		@brief	影を描画するかどうか設定する
		@param[in]	b		影を描画するかどうか
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		virtual void SetOwnShadowActive(bool b) override;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	OnCreate処理
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		virtual void OnCreate()override;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	OnUpdate処理（空関数）
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		virtual void OnUpdate()override {}
		//--------------------------------------------------------------------------------------
		/*!
		@brief	OnDraw処理
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		virtual void OnDraw()override;
	};




}
//end basecross
